#lang racket

(provide (all-defined-out))

;; QF_EUF: Quantifier free theory of uninterpreted functions with equality
;; UNSORTED FOL
;; Grammar of formulae
;; φ ::= φ bconn φ | ¬ φ | t = t | t ≠ t
;; bconn ::= ∨ | ∧ | ⇒
;; t ::= x | f(t, ...)

;; Each function symbol has an arity that must be declared.
;; (declare-fun f 3) means that f must take 3 arguments.

;; A Term is a Var or an App
(struct Var (x) #:transparent) ;; x : Symbol
(struct App (f args) #:transparent) ;; f : Symbol, args : (Listof Term)

;; l and r are Terms.
(struct Equality (l r) #:transparent)
;; l and r are equalities of the form (Equality (App 'Apply (List Var Var)) Var)
(struct EQpair (l r) #:transparent)

(struct EUF-state (equalities ;; DimacsVar ↦ Equality
                   backjump-table ;; Satisfaction-level ↦ DimacsVar
                   satisfaction-level ;; Natural that gets bumped each T-Satisfy.
                   pending ;; Listof (U (Equality Var Var) EQpair)
                   representative ;; Var ↦ Var
                   classes ;; Var ↦ Listof Var
                   uses ;; Var ↦ Listof (Equality (App 'Apply (List Var Var)) Var)
                   lookup ;; (Pair Var Var) ↦ Option (Equality (App 'Apply (List Var Var)) Var)
                   ) #:transparent)
